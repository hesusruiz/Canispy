{"version":3,"file":"DisplayMyHcert.c095bfb2.js","sources":["../../src/pages/DisplayMyHcert.js"],"sourcesContent":["import { log } from '../log'\r\nimport { AbstractPage, register } from '../components/AbstractPage'\r\n\r\nimport { CWT } from \"../components/cwt\"\r\nimport { verifyHcert } from '../components/verifications'\r\n\r\n// Images for the result of verification\r\nimport ok_image from \"../img/ok.png\"\r\nimport error_image from \"../img/error.png\"\r\nimport warning_image from \"../img/warning.png\"\r\n\r\nregister(\"DisplayMyHcert\", class DisplayMyHcert extends AbstractPage {\r\n\r\n    constructor(id) {\r\n        super(id)\r\n    }\r\n\r\n    async enter(qrContent) {\r\n        let html = this.html\r\n\r\n        // Check if we have a certificate in local storage\r\n        qrContent = window.localStorage.getItem(\"MYEUDCC\")\r\n        if (qrContent == null) {\r\n            this.render(html`\r\n            <div id=\"hcertFailed\" class=\"w3-panel bkg-fail\">\r\n                <h2>${T(\"There is no certificate.\")}</h2>\r\n            </div>\r\n            `)\r\n            return\r\n        }\r\n\r\n        let hcert = undefined\r\n        let verified = false\r\n        let thehtml = \"\"\r\n\r\n        // Decode credential verifying it at the same time\r\n        try {\r\n            hcert = await CWT.decodeHC1QR(qrContent, true);\r\n            verified = hcert[3]\r\n        } catch (error) {\r\n            log.error(\"Error verifying credential\", error)\r\n            this.render(this.renderGeneralError(error))\r\n            return;\r\n        }\r\n\r\n        // Build the verification structure\r\n        let verification = {\r\n            result: \"OK\",\r\n            message: T(\"The certificate is valid.\")\r\n        }\r\n\r\n        if (verified === false) {\r\n            verification.result = \"ERROR\"\r\n            verification.message = T(\"Signature validation failed. The certificate is not valid.\")\r\n        } else if (verified === \"PRE\") {\r\n            verification.result = \"WARNING\"\r\n            verification.message = T(\"$warningmsg\")\r\n        }\r\n\r\n        // If basic verification was OK, apply additional verifications\r\n        console.log(verification)\r\n        if ((verified === true) || (verified === \"PRE\")) {\r\n            console.log(\"Additional verifications\")\r\n            verified = verifyHcert(hcert)\r\n            console.log(verified)\r\n            if (verified != true) {\r\n                verification.result = \"ERROR\",\r\n                verification.message = T(verified)\r\n            }\r\n        }\r\n\r\n        console.log(verification)\r\n\r\n        try {\r\n            // Render the credential\r\n            thehtml = this.renderDetail(hcert, verification);\r\n        } catch (error) {\r\n            log.error(\"Error rendering credential\", error)\r\n            this.render(this.renderGeneralError(error))\r\n            return;\r\n        }\r\n\r\n        let fullPage = html`\r\n        ${thehtml}\r\n        <div class=\"sect-white\">\r\n            <button class=\"btn-primary\" @click=${()=> this.gotoPage(\"DisplayQR\")}>\r\n            ${T(\"Display QR\")}</button>\r\n        </div>\r\n        `\r\n        this.render(fullPage)\r\n\r\n    }\r\n\r\n    renderGeneralError(error) {\r\n        let html = this.html\r\n\r\n        return html`\r\n            <div id=\"hcertFailed\" class=\"w3-panel bkg-fail\">\r\n                <h3>Failed!</h3>\r\n                <p>The credential has an invalid format.</p>\r\n            </div>\r\n            `\r\n    }\r\n\r\n    renderDetail(cred, verification) {\r\n        let html = this.html\r\n\r\n        // The credential\r\n        let payload = cred[1];\r\n\r\n        // Parameters in case of correct validation\r\n        let title = \"Validated\"\r\n        let image = ok_image\r\n        let color = \"bkg-success\"\r\n\r\n        // Modify the parameters if WARNING or ERROR\r\n        if (verification.result === \"WARNING\") {\r\n            title = \"Warning\"\r\n            image = warning_image\r\n            color = \"bkg-warning\"\r\n        } else if (verification.result === \"ERROR\") {\r\n            title = \"Not Validated\"\r\n            image = error_image\r\n            color = \"bkg-error\"\r\n        }\r\n\r\n        let thehtml = html`\r\n            <div class=\"container\">\r\n\r\n                <div id=\"hcertWarning\" class=${`w3-panel ${color}`}>\r\n                    <img src=${image}  alt=\"\" />\r\n                    <h3>${T(title)}</h3>\r\n                    <p>${verification.message}</p>\r\n                </div>\r\n\r\n                <div class=\"section\">\r\n                    <div class=\"subsection\">\r\n                        <div class=\"etiqueta\">${T(\"Surname and forename\")}</div>\r\n                        <div class=\"valor h4\">${payload.fullName}</div>\r\n                    </div>\r\n                    <div class=\"subsection\">\r\n                        <div class=\"etiqueta\">${T(\"Date of birth\")}</div>\r\n                        <div class=\"valor h4\">${payload.dateOfBirth}</div>\r\n                    </div>\r\n                </div>\r\n           \r\n            </div>\r\n        `;\r\n\r\n\r\n        return thehtml;\r\n    }\r\n\r\n})\r\n"],"names":[],"mappings":"uOAWA,EAAS,iBAAkB,aAA6B,EAAa,CAEjE,YAAY,EAAI,CACZ,MAAM,QAGJ,OAAM,EAAW,CACnB,GAAI,GAAO,KAAK,KAIhB,GADA,EAAY,OAAO,aAAa,QAAQ,WACpC,GAAa,KAAM,CACnB,KAAK,OAAO;AAAA;AAAA,sBAEF,EAAE;AAAA;AAAA,eAGZ,OAGJ,GAAI,GACA,EAAW,GACX,EAAU,GAGd,GAAI,CACA,EAAQ,KAAM,GAAI,YAAY,EAAW,IACzC,EAAW,EAAM,SACZ,EAAP,CACE,EAAI,MAAM,6BAA8B,GACxC,KAAK,OAAO,KAAK,mBAAmB,IACpC,OAIJ,GAAI,GAAe,CACf,OAAQ,KACR,QAAS,EAAE,8BAGf,AAAI,IAAa,GACb,GAAa,OAAS,QACtB,EAAa,QAAU,EAAE,+DAClB,IAAa,OACpB,GAAa,OAAS,UACtB,EAAa,QAAU,EAAE,gBAI7B,QAAQ,IAAI,GACP,KAAa,IAAU,IAAa,QACrC,SAAQ,IAAI,4BACZ,EAAW,EAAY,GACvB,QAAQ,IAAI,GACR,GAAY,IACZ,GAAa,OAAS,QACtB,EAAa,QAAU,EAAE,KAIjC,QAAQ,IAAI,GAEZ,GAAI,CAEA,EAAU,KAAK,aAAa,EAAO,SAC9B,EAAP,CACE,EAAI,MAAM,6BAA8B,GACxC,KAAK,OAAO,KAAK,mBAAmB,IACpC,OAGJ,GAAI,GAAW;AAAA,UACb;AAAA;AAAA,iDAEuC,IAAK,KAAK,SAAS;AAAA,cACtD,EAAE;AAAA;AAAA,UAGR,KAAK,OAAO,GAIhB,mBAAmB,EAAO,CAGtB,MAAO,AAFI,MAAK;AAAA;AAAA;AAAA;AAAA;AAAA,cAUpB,aAAa,EAAM,EAAc,CAC7B,GAAI,GAAO,KAAK,KAGZ,EAAU,EAAK,GAGf,EAAQ,YACR,EAAQ,EACR,EAAQ,cAGZ,MAAI,GAAa,SAAW,UACxB,GAAQ,UACR,EAAQ,EACR,EAAQ,eACD,EAAa,SAAW,SAC/B,GAAQ,gBACR,EAAQ,EACR,EAAQ,aAGE;AAAA;AAAA;AAAA,+CAGyB,YAAY;AAAA,+BAC5B;AAAA,0BACL,EAAE;AAAA,yBACH,EAAa;AAAA;AAAA;AAAA;AAAA;AAAA,gDAKU,EAAE;AAAA,gDACF,EAAQ;AAAA;AAAA;AAAA,gDAGR,EAAE;AAAA,gDACF,EAAQ;AAAA;AAAA;AAAA;AAAA;"}