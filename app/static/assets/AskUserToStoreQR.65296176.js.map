{"version":3,"file":"AskUserToStoreQR.65296176.js","sources":["../../src/pages/AskUserToStoreQR.js"],"sourcesContent":["import { log } from '../log'\r\nimport { AbstractPage, register } from '../components/AbstractPage'\r\nimport { CWT } from \"../components/cwt\"\r\nimport { verifyHcert } from '../components/verifications'\r\n\r\nregister(\"AskUserToStoreQR\", class AskUserToStoreQR extends AbstractPage {\r\n\r\n    constructor(id) {\r\n        super(id)\r\n    }\r\n\r\n    async enter(qrcode) {\r\n        let html = this.html\r\n\r\n        let verification = await this.verifyQRCertificate(qrcode)\r\n\r\n        if (verification.result == \"ERROR\") {\r\n            this.render(html`\r\n            <div class=\"container center\">\r\n                <div id=\"hcertFailed\" class=\"w3-panel bkg-error ptb-16\">\r\n                    <h3>Failed!</h3>\r\n                    <p>${verification.message}.</p>\r\n                </div>\r\n\r\n                <div class=\"ptb-16\">\r\n        \r\n                    <button class=\"btn-primary\" @click=${()=>window.location.replace(location.origin)}>${T(\"Cancel\")}</button>\r\n        \r\n                </div>\r\n            </div>\r\n                `\r\n            )\r\n            return;\r\n        }\r\n\r\n        this.QRCertificate = qrcode\r\n\r\n        let theHtml = html`\r\n        <div class=\"container\">\r\n            <div class=\"w3-card-4 w3-center\" style=\"margin-top:100px;\">\r\n        \r\n                <header class=\"w3-container color-primary\" style=\"padding:10px\">\r\n                    <h1>${T(\"You received a new EU COVID certificate!\")}</h1>\r\n                </header>\r\n        \r\n                <div class=\"w3-container ptb-16\">\r\n                    <p>${T(\"You can save it in this device for easy access later.\")}</p>\r\n                    <p>${T(\"Please click Save to save the certificate.\")}</p>\r\n                </div>\r\n        \r\n                <div class=\"ptb-16\">\r\n        \r\n                    <button class=\"btn-primary\" @click=${()=>this.saveQRCertificate()}>${T(\"Save\")}</button>\r\n        \r\n                </div>\r\n        \r\n            </div>\r\n        </div>\r\n        `\r\n\r\n        this.render(theHtml)\r\n    }\r\n\r\n    async verifyQRCertificate(qrContent) {\r\n\r\n        let hcert = undefined\r\n    \r\n        // Decode QR credential verifying it at the same time\r\n        // At this moment we perform only technical verifications\r\n        try {\r\n            hcert = await CWT.decodeHC1QR(qrContent, true);\r\n        } catch (error) {\r\n            // An exception means there was a problem with decoding\r\n            log.error(\"Error verifying credential\", error)\r\n            return {\r\n                result: \"ERROR\",\r\n                message: T(\"Signature validation failed. The certificate is not valid.\")\r\n            }\r\n        }\r\n    \r\n        let technical_verification = hcert[3]\r\n        if (technical_verification == false) {\r\n            log.error(\"Error verifying credential\")\r\n            return {\r\n                result: \"ERROR\",\r\n                message: T(\"Signature validation failed. The certificate is not valid.\")\r\n            }\r\n        }\r\n    \r\n        // If technical verification was OK, apply additional verifications\r\n        console.log(\"Additional verifications\")\r\n        let business_verification = verifyHcert(hcert)\r\n        console.log(business_verification)\r\n        if (business_verification != true) {\r\n            return {\r\n                result: \"ERROR\",\r\n                message: T(business_verification)\r\n            }\r\n        }\r\n    \r\n        // We passed all verifications, but should return a WARNING for certificates\r\n        // with public keys in the PREPRODUCTION list\r\n    \r\n        // Build the verification structure\r\n        let verification = {\r\n            result: \"OK\",\r\n            hcert: hcert,\r\n            message: T(\"The certificate is valid.\")\r\n        }\r\n    \r\n        if (technical_verification === \"PRE\") {\r\n            verification.result = \"WARNING\"\r\n            verification.message = T(\"$warningmsg\")\r\n        }\r\n    \r\n        return verification\r\n    \r\n    }\r\n    \r\n\r\n\r\n    saveQRCertificate() {\r\n\r\n        // Store it in local storage\r\n        window.localStorage.setItem(\"MYEUDCC\", this.QRCertificate)\r\n    \r\n        // Reload the application with a clean URL\r\n        window.location.replace(document.location.origin)\r\n    \r\n    }\r\n    \r\n})\r\n"],"names":[],"mappings":"+KAKA,EAAS,mBAAoB,aAA+B,EAAa,CAErE,YAAY,EAAI,CACZ,MAAM,QAGJ,OAAM,EAAQ,CAChB,GAAI,GAAO,KAAK,KAEZ,EAAe,KAAM,MAAK,oBAAoB,GAElD,GAAI,EAAa,QAAU,QAAS,CAChC,KAAK,OAAO;AAAA;AAAA;AAAA;AAAA,yBAIC,EAAa;AAAA;AAAA;AAAA;AAAA;AAAA,yDAKmB,IAAI,OAAO,SAAS,QAAQ,SAAS,WAAW,EAAE;AAAA;AAAA;AAAA;AAAA,mBAM/F,OAGJ,KAAK,cAAgB,EAErB,GAAI,GAAU;AAAA;AAAA;AAAA;AAAA;AAAA,0BAKI,EAAE;AAAA;AAAA;AAAA;AAAA,yBAIH,EAAE;AAAA,yBACF,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,yDAK8B,IAAI,KAAK,uBAAuB,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAQnF,KAAK,OAAO,QAGV,qBAAoB,EAAW,CAEjC,GAAI,GAIJ,GAAI,CACA,EAAQ,KAAM,GAAI,YAAY,EAAW,UACpC,EAAP,CAEE,SAAI,MAAM,6BAA8B,GACjC,CACH,OAAQ,QACR,QAAS,EAAE,+DAInB,GAAI,GAAyB,EAAM,GACnC,GAAI,GAA0B,GAC1B,SAAI,MAAM,8BACH,CACH,OAAQ,QACR,QAAS,EAAE,+DAKnB,QAAQ,IAAI,4BACZ,GAAI,GAAwB,EAAY,GAExC,GADA,QAAQ,IAAI,GACR,GAAyB,GACzB,MAAO,CACH,OAAQ,QACR,QAAS,EAAE,IAQnB,GAAI,GAAe,CACf,OAAQ,KACR,MAAO,EACP,QAAS,EAAE,8BAGf,MAAI,KAA2B,OAC3B,GAAa,OAAS,UACtB,EAAa,QAAU,EAAE,gBAGtB,EAMX,mBAAoB,CAGhB,OAAO,aAAa,QAAQ,UAAW,KAAK,eAG5C,OAAO,SAAS,QAAQ,SAAS,SAAS"}